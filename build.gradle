buildscript {                               // 이 프로젝트의 플러그인 의존성 관리를 위한 설정
    ext{                                    // build.gradle에서 사용하는 전역변수를 설정하겠다
        springBootVersion = '2.1.7.RELEASE' // 전역변수(springBootVersion)를 생성하고 값('2.1.7 RELEASE')을 할당
    }                                       // spring-boot-gradle-plugin이라는 스프링 부트 그레이들 플러그인의 2.1.7. RELEASE를 의존성으로 받겠다는 의미
    repositories {                          // 각종 의존성(라이브러리)들을 어떤 원격 저장소에서 받을지를 정함.
        mavenCentral()                      // 기본적으로 mavenCentral을 많이 사용하지만 최근에는 라이브러리 업로드 난이도 때문에 jcenter도 많이 사용함
        jcenter()                           // 본인이 직접 만든 라이브러리를 업로드하기 위해선 많은 과정과 설정이 필요하고 이로 인해 라이브러리 공유가 안되는 상황이 일어남
    }                                       // 이를 개선한 것이 jcenter. 라이브러리 업로드를 간단하게 하고 mavenCentral에도 업로드 될 수 있도록 자동화를 할 수 있음. 여기서는 둘 다 사용
    dependencies {                          // 프로젝트 개발에 필요한 의존성들을 선언하는 곳
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        // org.springframework.boot:spring-boot-starter-web과 org.springframework.boot:spring-boot-starter-test를 받도록 선언되어 있음
    }                                       // intelliJ는 메이븐 저장소의 데이터를 인덱싱해서 관리하기 때문에 커뮤니티 버전을 사용해도 의존성 자동완성(ctrl + space)이 가능
}                                           // 의존성 코드는 직접 작성해도 되고, 자동완성으로 만들어도 됨. 하지만 특정 버전을 명시하면 안됨. 그래야만 10열에 작성한 classpath의 버전을 따라감
// 버전을 관리 할 경우 각 라이브러리들의 버전 관리가 한 곳에 집중되고, 버전 충돌 문제도 해결되어 편하게 개발을 진행 할 수 있음
plugins {
    id 'java'
    id 'eclipse'
    id 'org.springframework.boot' version '2.7.1'
    id 'io.spring.dependency-management' version '1.0.12.RELEASE'
}

group 'com.jojoldu.book'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}


dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation 'org.springframework.boot:spring-boot-starter-test'
}